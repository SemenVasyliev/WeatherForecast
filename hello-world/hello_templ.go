// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.639
package main

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"
import "strings"

func Base() templ.CSSClass {
	var templ_7745c5c3_CSSBuilder strings.Builder
	templ_7745c5c3_CSSBuilder.WriteString(`background-color:#21295C;`)
	templ_7745c5c3_CSSBuilder.WriteString(`color:#FCFFF7;`)
	templ_7745c5c3_CSSBuilder.WriteString(`font-family:'Arial', sans-serif;`)
	templ_7745c5c3_CSSBuilder.WriteString(`display:flex;`)
	templ_7745c5c3_CSSBuilder.WriteString(`flex-direction:column;`)
	templ_7745c5c3_CSSBuilder.WriteString(`align-items:center;`)
	templ_7745c5c3_CSSBuilder.WriteString(`justify-content:center;`)
	templ_7745c5c3_CSSBuilder.WriteString(`height:100vh;`)
	templ_7745c5c3_CSSBuilder.WriteString(`margin:0;`)
	templ_7745c5c3_CSSBuilder.WriteString(`padding:20px;`)
	templ_7745c5c3_CSSBuilder.WriteString(`box-sizing:border-box;`)
	templ_7745c5c3_CSSID := templ.CSSID(`Base`, templ_7745c5c3_CSSBuilder.String())
	return templ.ComponentCSSClass{
		ID:    templ_7745c5c3_CSSID,
		Class: templ.SafeCSS(`.` + templ_7745c5c3_CSSID + `{` + templ_7745c5c3_CSSBuilder.String() + `}`),
	}
}

func GetLocation(id string) templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_GetLocation_6b29`,
		Function: `function __templ_GetLocation_6b29(id){if (navigator.geolocation) {
		navigator.geolocation.getCurrentPosition((position) => {
			const latitude = position.coords.latitude;
			const longitude = position.coords.longitude;
			console.log(latitude, longitude);
			const element = document.getElementById(id)
			element.setAttribute("data", ` + "`" + `${latitude},${longitude}` + "`" + `);
			return
		},
		function(error) {
			console.log(error)
		}
	);
} else {
	console.log("No Geolocation")
}

}`,
		Call:       templ.SafeScript(`__templ_GetLocation_6b29`, id),
		CallInline: templ.SafeScriptInline(`__templ_GetLocation_6b29`, id),
	}
}

func FetchWeather(id string) templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_FetchWeather_5118`,
		Function: `function __templ_FetchWeather_5118(id){const element = document.getElementById(id);
    const dataValue = element.getAttribute("data");
    const [latitude, longitude] = dataValue.split(",");

    const apikey = "5828794b271c4f54b41181103242003";
    const apiUrl = ` + "`" + `http://api.weatherapi.com/v1/current.json?key=${apikey}&q=${latitude},${longitude}&aqi=no` + "`" + `;

    fetch(apiUrl)
    .then(response => response.json())
    .then(data => {
		console.log('Weather Data:', data);
        // Show data on page
        const textContent = ` + "`" + `${data.location.country} <br/><br/>
			${data.location.name} <br/><br/>
            ${data.current.condition.text} <br/><br/>
            ${data.current.temp_c}Â°C<br/><br/>
            <img src="${data.current.condition.icon}" />` + "`" + `;
        element.innerHTML = textContent;

		document.getElementById("showWeatherBtn").style.display = 'none';

        const weatherData = {			
            country: data.location.country,
			city: data.location.name,
            conditionText: data.current.condition.text,
            temp_c: data.current.temp_c,
        };
        // sending data to Go server
        fetch("/weather-data", {
            method: "POST",
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(weatherData),
        })
        .then(response => response.json())
        .then(serverResponse => {
            console.log('Response from server:', serverResponse);
        })
        .catch(error => console.error('Error sending weather data to server:', error));
    })
    .catch(error => console.error('Error fetching weather:', error));
}`,
		Call:       templ.SafeScript(`__templ_FetchWeather_5118`, id),
		CallInline: templ.SafeScriptInline(`__templ_FetchWeather_5118`, id),
	}
}

func Hello(name string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<html><head><title>Hello Templ</title></head>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 = []any{Base()}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var2...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.RenderScriptItems(ctx, templ_7745c5c3_Buffer, GetLocation("data-div"))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<body onload=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 templ.ComponentScript = GetLocation("data-div")
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var3.Call)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 string
		templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var2).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `hello.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\"><h1>Hello, ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var5 string
		templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(name)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `hello.templ`, Line: 90, Col: 29}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</h1>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.RenderScriptItems(ctx, templ_7745c5c3_Buffer, FetchWeather("data-div"))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<button onclick=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var6 templ.ComponentScript = FetchWeather("data-div")
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var6.Call)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" id=\"showWeatherBtn\">Show Weather</button><div id=\"data-div\"></div></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
